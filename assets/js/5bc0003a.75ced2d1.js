"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[794],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return m}});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=l(o),m=n,d=h["".concat(c,".").concat(m)]||h[m]||p[m]||a;return o?r.createElement(d,s(s({ref:t},u),{},{components:o})):r.createElement(d,s({ref:t},u))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,s=new Array(a);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<a;l++)s[l]=o[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,o)}h.displayName="MDXCreateElement"},49380:function(e,t,o){o.r(t),o.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=o(83117),n=o(80102),a=(o(67294),o(3905)),s=["components"],i={sidebar_position:2},c="System Block Diagram",l={unversionedId:"requirements/system-block-diagram",id:"requirements/system-block-diagram",title:"System Block Diagram",description:"PatreonShoutSystemBlockDiagramdrawio",source:"@site/docs/requirements/system-block-diagram.md",sourceDirName:"requirements",slug:"/requirements/system-block-diagram",permalink:"/project-patreon-shout/docs/requirements/system-block-diagram",draft:!1,editUrl:"https://github.com/Capstone-Projects-2022-Fall/project-patreon-shout/edit/main/documentation/docs/requirements/system-block-diagram.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"System Overview",permalink:"/project-patreon-shout/docs/requirements/system-overview"},next:{title:"General Requirements",permalink:"/project-patreon-shout/docs/requirements/general-requirements"}},u={},p=[],h={toc:p};function m(e){var t=e.components,o=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"system-block-diagram"},"System Block Diagram"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/Capstone-Projects-2022-Fall/project-patreon-shout/blob/b387928eaffe5ffa323aab8e2d21398bbf666cdb/documentation/static/img/PatreonShout_SystemBlockDiagram.png",alt:"PatreonShout_SystemBlockDiagram_drawio"})),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/Capstone-Projects-2022-Fall/project-patreon-shout/blob/doca-changes/documentation/static/img/PatreonShout_SystemBlockDiagram.png",alt:"PatreonShout_SystemBlockDiagram_drawio"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Figure 1.")," ",(0,a.kt)("em",{parentName:"p"},"High level design of the Patreon Shout application"),"  "),(0,a.kt)("p",null,"Figure 1 depicts the high-level design of the application from the perspective of patrons and creators. From the content creator\u2019s perspective, they decide to use Patreon Shout to forward their Patreon posts to other platforms so that their outreach to future potential patrons is greater. To do this they sign up to PatreonShout by logging into the application through Patreon, then they select which social platforms they wish to output their posts to and complete all tasks required to output to the chosen social platforms. Afterwards, the Post Endpoint will use Patreon\u2019s API to collect the creator\u2019s posts on Patreon and save them in the MySQL database. The Post Parser does by having Patreon trigger a new post endpoint inside of the Post Parser that will send us the post information. Furthermore, we need both of these options when getting posts from Patreon because we can only use Patreon\u2019s API for a given creator when we have that specific creator\u2019s permission to retrieve posts from Patreon. This means that when we don\u2019t have a creator that has signed up to our website, we will use Selenium to web scrape the posts off of Patreon. Those posts will subsequently be given to our Java backend and be output to the creator specified social platforms. Then, from a patron\u2019s perspective, they will be able to see these posts on the specified social platforms. Furthermore, a patron will also be able to view the content creators they follow on the Patreon Shout website. To do this, they will initially follow the same procedure as the content creators do by signing up to Patreon Shout through Patreon. Then Patreon Shout will automatically get the creators that the patron follows and output their posts to the Patreon Shout main feed for the user to view. The backend of our application, including the \u201cJava App API Interface\u201d, the MySQL database, and the \u201cPost Parser\u201d will be hosted on AWS. The \u201cJava App API Interface\u201d and the \u201cPost Parser\u201d will run in EC2 instances and deployed using Elastic Beanstalk. Furthermore, S3 buckets will be used to contain the application versions for Elastic Beanstalk and our MySQL database will be using RDS through AWS. The frontend of our application uses hostinger.com for the domain and hosting of our website."))}m.isMDXComponent=!0}}]);